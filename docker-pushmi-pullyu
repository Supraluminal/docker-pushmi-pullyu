#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset
trap 'echo "$0: line $LINENO: exit status of last command: $?" 1>&2' ERR
trap 'cleanup' EXIT

cleanup() {
  if [ -n "${registry_container_name-}" ] && docker ps -q -f name="$registry_container_name"
  then
    echo "Killing the registry..."
    docker kill "$registry_container_name" || true
    docker rm "$registry_container_name" || true
  fi
}

flag_error() {
  local message="$1"
  echo "$message" >&2
  usage >&2
  exit 125
}

argument_error() {
  local message="$1"
  echo "$message" >&2
  usage >&2
  exit 1
}

usage() {
  echo "
Usage:	$0 [OPTIONS] [USER@]HOST NAME[:TAG] [ NAME[:TAG] ... ]

Push images directly to a remote host (without a separate registry)

Options:
  -s, --ssh_opts string   Specify additional ssh arguments (e.g. --ssh_opts \"-i private.pem -C\")"
}

args=""
while [ -n "${1+x}" ]
do
  case "$1" in
    -s|--ssh_opts|--ssh_opts=*)
      ssh_opts="${1##--ssh_opts=}"
      if [ "$ssh_opts" = "$1" ]
      then
        if [ "$#" -ge 2 ]
        then
          ssh_opts="$2"
          shift
        else
          ssh_opts=""
        fi
      fi
      if [ -z "$ssh_opts" ]
      then
        flag_error "flag needs an argument: $1"
      fi
      ;;
    -*)
      flag_error "unknown flag: $1"
      ;;
    *)
      args="$args $1"
      ;;
  esac
  shift
done

eval set -- "$args"

if [ "$#" -lt 2 ]
then
  argument_error "\"$0\" requires at least 2 arguments."
fi

deploy_target="$1"
shift
image_names="$*"

registry_port=5000
registry_host="localhost"

echo "Running a registry at $registry_host:$registry_port..."
registry_container_name=$(
  docker run --detach --publish="$registry_port:$registry_port" registry:2
)

for source_image_name in $image_names; do
  echo "Pushing $source_image_name to $registry_host:$registry_port..."
  docker tag "$source_image_name" "$registry_host:$registry_port/$source_image_name"
  docker push "$registry_host:$registry_port/$source_image_name"
  docker rmi "$registry_host:$registry_port/$source_image_name"
done

ssh -R "$registry_port:$registry_host:$registry_port" ${ssh_opts:-} "$deploy_target" sh <<EOF
  for target_image_name in $image_names; do
    echo "Pulling \$target_image_name onto $deploy_target from $registry_host:$registry_port..."
    docker pull "$registry_host:$registry_port/\$target_image_name" \
      && docker tag "$registry_host:$registry_port/\$target_image_name" "\$target_image_name" \
      && docker rmi "$registry_host:$registry_port/\$target_image_name"
  done
EOF
